import os
import hashlib
import re, ast
import array, math


location_dir = os.path.dirname(os.path.abspath(__file__))

# location_dir = "/mnt/home/james/checkouts/adam_b_project/host_im/mount/malware-classification-master"

good=location_dir+"/samples/not/"
bad=location_dir+"/samples/virus/"

headers=["Name", "md5", "entropy", "imports", "good", "bad", "legitimate"]


def get_entropy(data):
    if len(data) == 0:
	    return(0.0)
    occurences = array.array('L', [0]*256)
    for x in data:
  	    occurences[x if isinstance(x, int) else ord(x)] += 1

    entropy = 0
    for x in occurences:
        if x:
            p_x = float(x) / len(data)
            entropy -= p_x*math.log(p_x, 2)

            return entropy


def get_average_name_length(data):
    pass


def get_variable_name_entropy(data):
    if len(data) == 0:
	    return(0.0)
    else:
        data = str(data)
    variables_array = []
    variables_array.append(re.findall(r'(?<=\bdef\s)(\w+)', data) )
    variables_array.append(re.findall(r'(\w+)(?=\b[=]\s)', data) )
    print(variables_array)
    string = ''
    if not variables_array:
        for i, j in variables_array:
            string += i[j]
        print(string)
    if not string:
        return(get_entropy(string) )

    # occurences = array.array('L', [0]*256)
    # for x in data:
  	#     occurences[x if isinstance(x, int) else ord(x)] += 1
    # # (?<=\bipsum\s)(\w+)
    # entropy = 0
    # for x in occurences:
    #     if x:
    #         p_x = float(x) / len(data)
    #         entropy -= p_x*math.log(p_x, 2)

    #         return entropy


#good = 1
#bad = 0
goodbad=[bad,good]
cases=[]
for goodbad_i in [0,1]:
    for subdir, dirs, files in os.walk(goodbad[goodbad_i]):
        for file in files:
            if file[-1]=="~": continue #Ignore emacs backups
            o={}
            f=open(goodbad[goodbad_i]+file,"r")
            data=f.read().encode("ascii")       ## We need encode for hashing, buuuuuuuut...
            stringData = data.decode("ascii")   ## .encode breaks re searches and abstract syntax trees (mostly)
            f.close()
            # print(stringData)       ## test prints
            # print(data)           ## test prints
            m=hashlib.md5()     # hash that badboy!!
            m.update(data)
            digest=m.hexdigest()
            # print(digest)         ## test prints
            get_variable_name_entropy(stringData)
            o["Name"]=file
            o["md5"]=digest
            o["entropy"]=get_entropy(data)
            o["imports"]=data.count(b"import")
            # o["Average variable name length"]=
            o["good"]=data.count(b"good")
            o["bad"]=data.count(b"bad")
            o["legitimate"]=goodbad_i
            # print(o)              ## test prints
            cases.append(o)



f=open(location_dir+"/data_ab.csv", "w")
f.write("|".join(headers)+"\n")
for case in cases:
    f.write("|".join([str(case[i]) for i in headers])+"\n")
f.close()

