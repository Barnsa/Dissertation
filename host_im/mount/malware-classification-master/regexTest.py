import os, re, ast, pprint

data_location = os.path.dirname(os.path.abspath(__file__))
f = open("/home/buzzki11/Dissertation/host_im/mount/malware-classification-master/samples/virus/Botnet_Component.py", "r")
data = str(f.read()) #.encode("ASCII"))
print("**********************  INITIAL METHOD  **********************")
print(data)

## (?<=while\s)(\w+)|(?==)(\w+)     ### looks for the logical condition for a while loop
## (?!(\n))(?<=import\s)(\w+)       ### ignores newline characters and finds all the import labels

## (?!(\n))(\w+)(?=(\s=)|(=))       ### ignores newline characters and finds any word before an equals sign (BUG: grabs starting n's of the preceeding newline characters)
## (\w+)(\.)(\w+)                   ### Isolates function calls

## finds every class name, variable name, method name, and function name
## in a python 3 string. (cannot be byte string cause of \n characters)
## (\w+)(?=\s=)|(\w+)(?==)|(?<=def\s)(\w+)|(?<=class\s)(\w+)

# print("**********************  STRIP METHOD  **********************")
# data = data.strip('\n')
# print(data)

# print("**********************  REPLACE METHOD  **********************")
# data = list(map(lambda x: x.replace('\n', ''), data))
# print(data.replace('\n', ''))
# print(data.translate({ord('\n'): None}))

print("********************** FINDALL  METHOD  **********************")
## https://docs.python.org/3/howto/regex.html
## https://regex101.com/
print(re.findall(r'(?!(\n))(\w+)(?=(\s=)|(=))', data))

print("********************** AST  METHOD  **********************")
## https://greentreesnakes.readthedocs.io/en/latest/nodes.html#literals
## https://docs.python.org/2/library/ast.html
## https://docs.python.org/3/library/ast.html
## https://pypi.org/project/astor/
## https://astor.readthedocs.io/en/latest/

class MyVisitor(ast.NodeVisitor):
    def visit_Str(self, node):
        self.generic_visit(node)
        print('String Node: "' + node.s + '"')
    def visit_NameConstant(self, node):
        self.generic_visit(node)
        print('Name Node: "' + node.value +'"')
    def visit_Imports(self, node):
        self.generic_visit(node)
        print('Name Import: "' + node.names +'"')

class MyTransformer(ast.NodeTransformer):
    def visit_Str(self, node):
        return ast.Str('str: ' + node.s)
    
class FuncLister(ast.NodeVisitor):
    def visit_FunctionDef(self, node):
        print(node.name)
        self.generic_visit(node)


class VisitImports(ast.NodeVisitor):

    # def visit_alias(self, node):
    #     self.generic_visit(node)
    #     print(node)
    def visit_Import(self, node):
        self.generic_visit(node)
        print(node.names)
    def visit_ImportFrom(self, node):
        self.generic_visit(node)
        print(node.module)
    # pass


tree = ast.parse("from ..foo.bar import a as b, c")
# parsed = ast.parse("print('Hello World')")
parsed = ast.parse(data)
# MyTransformer().visit(parsed)
MyVisitor().visit(parsed)
FuncLister().visit(parsed)
VisitImports().visit(parsed)
# for node in ast.walk(parsed):
#     if isinstance(node, ast.Import):
#         print(node.names)
#     if isinstance(node, ast.Name):
#         print(node.id)